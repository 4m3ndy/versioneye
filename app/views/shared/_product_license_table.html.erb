

<% if defined?(display_pdf_export) && display_pdf_export && display_pdf_export == true && !project_id.nil? && !project_id.to_s.empty? && !license_whitelist_id.to_s.empty? %>
  <div style="margin: 10px 0 7px 0;">
    <%= link_to 'BoM PDF Export', lwl_export_user_project_path( project_id ) %> |
    <%= link_to 'BoM CSV Export', lwl_csv_export_user_project_path( project_id ) %>
  </div>
<% end %>

<% whitelisted_count = 0 %>
<% unknown_count = 0 %>
<% violated_count = 0 %>
<% license_hash = Hash.new %>
<table class="dependency_table">
  <thead>
    <tr>
      <th style="padding-left: 5px;" >Dependency</th>
      <th style="padding-left: 5px;" >License</th>
    </tr>
  </thead>
  <% dependencies.sort! { |a,b| a.name.downcase <=> b.name.downcase } %>
  <% dependencies.each do |dependency| %>
    <% sep_class = "license_seperator" %>

    <% licenses = [] %>
    <% dep_version = '0' %>
    <% if dependency.respond_to?('version_requested') %>
      <% dep_version = dependency.version_requested %>
    <% else %>
      <% dep_version = dependency.version %>
    <% end %>
    <% licenses = dependency.license_caches if dependency.respond_to?( 'license_caches' ) %>
    <% licenses = dependency.licenses       if dependency.respond_to?( 'licenses' ) %>

    <% if licenses && !licenses.empty? %>
      <% licenses.each do |license| %>

        <% license_hash[license.name] = [] if license_hash[license.name].nil? %>
        <% license_hash[license.name] << dependency %>

        <% whitelist_class = '' %>
        <% if license.respond_to? 'is_whitelisted?' %>
          <% if license.is_whitelisted? == false %>
            <% whitelist_class = 'error'    %>
            <% violated_count += 1 %>
          <% end %>
          <% if license.is_whitelisted? == true %>
            <% whitelist_class = 'success'   %>
            <% whitelisted_count += 1 %>
          <% end %>
        <% elsif @project.license_whitelist %>
          <% on_whitelist = @project.license_whitelist.include_license_substitute?( license.name_substitute ) %>
          <% if on_whitelist == false %>
            <% whitelist_class = 'error'    %>
            <% violated_count += 1 %>
          <% end %>
          <% if on_whitelist == true %>
            <% whitelist_class = 'success'  %>
            <% whitelisted_count += 1 %>
          <% end %>
        <% end %>

        <tr class="<%= sep_class %> <%= whitelist_class %> ">
          <td style="padding-left: 5px;">
            <a class="#a dep_link" href="<%= product_url_for_projectdependency(dependency) %>" ><%= dependency.name %> : <%= dep_version %></a>
            <% if license && license.respond_to?('on_cwl') && license.respond_to?('on_whitelist') && license.on_cwl == true && license.on_whitelist == false %>
              <i class="fa fa-thumbs-o-up" style="color: blue" title="whitelistted through component whitelist"></i>
            <% end %>
          </td>
          <td style="padding-left: 5px;">
            <%= render :partial => "shared/license_name", :locals => {:license => license } %>
          </td>
        </tr>
        <% sep_class = "" %>
      <% end %>
    <% else %>
      <% unknown_count += 1 %>
      <% license_hash['unknown'] = [] if license_hash['unknown'].nil? %>
      <% license_hash['unknown'] << dependency %>
      <tr class="flash warning">
        <td style="padding-left: 5px;">
          <% if dependency.prod_key %>
            <a class="#a dep_link" href="<%= product_url_for_projectdependency(dependency) %>" ><%= dependency.name %> : <%= dep_version %></a>
          <% else %>
            <%= dependency.name %>
          <% end %>
        </td>
        <td style="padding-left: 5px;"> UNKNOWN </td>
      </tr>
    <% end %>

  <% end %>
</table>
<br/><br/>

<% if display_charts == true && !license_whitelist_id.to_s.empty? %>
<div id='pie1' style="text-align: center;">
  <canvas id="pie1-chart" style="margin: auto; max-width: 350px; max-height: 350px;"></canvas>

</div>
<script type="text/javascript">
jQuery(function(){
  console.log('going to render license graph...');

  var dataset = {
    data: [<%= whitelisted_count %>, <%= unknown_count %>, <%= violated_count %>],
    backgroundColor: ["#8BC34A", "#FFC107", "#E64A19"]  
  }

  var is_any_positive = _.some(dataset['data'], function(a){return a > 0;}); 
  if(is_any_positive){
    var pie = new Chart($("#pie1-chart"), {
      type: 'doughnut',
      data: {
        labels: ['Whitelisted', 'Unknown', 'Violated'],
        datasets: [dataset]
      }
    });  
  }
 
});

</script>
<br/><br/>
<% end %>

<% if defined?(display_grouping) && display_grouping && display_grouping == true %>
  <% license_hash.sort.map do |license_name, value| %>
    <div>
      <% if license_name.eql?("unknown") %>
        <span class="label label-warning"><%= license_name %></span>
      <% else %>
        <span ><%= license_name %></span>
      <% end %>
    </div>
    <% license_hash[license_name].each do |dependency| %>
      <span class="license_box"><a href="<%= product_url_for_projectdependency( dependency ) %>" ><%= dependency.name %></a></span>
    <% end %>
    <br/><br/>
  <% end %>

<% if display_charts == true && license_hash.count > 1 %>
  <div id='pie2' style="text-align: center;">
  	<canvas id="pie2-chart" style="margin: auto; max-width: 350px; max-height: 350px;"></canvas>

  </div>
  <script type="text/javascript">
		jQuery(function(){
			console.log("going to render license pie nr.2...");

			var labels = [];
			var dataset = {
				data: [],
				backgroundColor: []		
			};


			var licCounts = [
				<% license_hash.sort.map do |license_name, value| %>
					{
						label: "<%= license_name %>",
						value: <%= license_hash[license_name].count %>
					},
				<% end %>
			];

      function hex2rgb(h) {
        return [(h & (255 << 16)) >> 16, (h & (255 << 8)) >> 8, h & 255];
      }
      function distance(a, b) {
        var d = [a[0] - b[0], a[1] - b[1], a[2] - b[2]];
        return Math.sqrt((d[0]*d[0]) + (d[1]*d[1]) + (d[2]*d[2]));
      }
      function freshColor(sofar, d) {
        var n, ok;
        while(true) {
            ok = true;
            n = Math.random()*0xFFFFFF<<0;
            for(var c in sofar) {
                if(distance(hex2rgb(sofar[c]), hex2rgb(n)) < d) {
                    ok = false;
                    break;
                }
            }
            if(ok) { return Number(n).toString(16); }
        }
      }
      function getColors(n, d) {
        var a = [];
        for(; n > 0; n--) {
          a.push( "#" + freshColor(a, d));
        }
        return a;
      }

      var n = licCounts.length;
      var colors = getColors(n + 1, 400 / n);

			licCounts.forEach(function(item, i){
				labels.push(item.label);
				dataset.data.push(item.value);
				dataset.backgroundColor.push(colors[i]);
			});

			//-- render graph
			var pie2 = new Chart($("#pie2-chart"), {
				type: 'doughnut',
				data: {
					labels: labels,
					datasets: [dataset]
				}
			});

		});
  </script>
  <br/><br/>
  <% end %>
<% end %>
